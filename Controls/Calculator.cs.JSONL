{"prompt":"Here is the contents of Calculator.cs, Can you please summarize the contents?","completion":"This is a .cs code file","code":"using System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Input;\r\n\r\nnamespace Jon.Wpf.CustomControls\r\n{\r\n\r\n    public class Calculator : Control\r\n    {\r\n        public static readonly DependencyProperty ValueProperty = DependencyProperty.Register(\r\n            \"Value\", typeof(string), typeof(Calculator), new PropertyMetadata(\"0\"));\r\n\r\n        public string Value\r\n        {\r\n            get { return (string)GetValue(ValueProperty); }\r\n            set \r\n            { \r\n                if(value.Length>1)\r\n                {\r\n                    if (value[0]=='0')\r\n                    {\r\n                        value = value.Substring(1);\r\n                    }\r\n                }                    \r\n                SetValue(ValueProperty, value); \r\n            }\r\n        }\r\n\r\n        public static readonly RoutedEvent CalculationCompletedEvent = EventManager.RegisterRoutedEvent(\r\n            \"CalculationCompleted\", RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(Calculator));\r\n\r\n        public event RoutedEventHandler CalculationCompleted\r\n        {\r\n            add { AddHandler(CalculationCompletedEvent, value); }\r\n            remove { RemoveHandler(CalculationCompletedEvent, value); }\r\n        }\r\n\r\n        private string _operation = \"\";\r\n        private double _operand = 0;\r\n\r\n        public override void OnApplyTemplate()\r\n        {\r\n            base.OnApplyTemplate();\r\n\r\n            for (int i = 0; i <= 9; i++)\r\n            {\r\n                var button = GetTemplateChild(\"Button\" + i) as Button;\r\n                if (button != null)\r\n                {\r\n                    button.Click += (sender, args) => { Value += i.ToString(); };\r\n                }\r\n            }\r\n\r\n            var addButton = GetTemplateChild(\"AddButton\") as Button;\r\n            if (addButton != null)\r\n            {\r\n                addButton.Click += (sender, args) => { SetOperation(\"+\"); };\r\n            }\r\n\r\n            var subtractButton = GetTemplateChild(\"SubtractButton\") as Button;\r\n            if (subtractButton != null)\r\n            {\r\n                subtractButton.Click += (sender, args) => { SetOperation(\"-\"); };\r\n            }\r\n\r\n            var multiplyButton = GetTemplateChild(\"MultiplyButton\") as Button;\r\n            if (multiplyButton != null)\r\n            {\r\n                multiplyButton.Click += (sender, args) => { SetOperation(\"*\"); };\r\n            }\r\n\r\n            var divideButton = GetTemplateChild(\"DivideButton\") as Button;\r\n            if (divideButton != null)\r\n            {\r\n                divideButton.Click += (sender, args) => { SetOperation(\"/\"); };\r\n            }\r\n\r\n            var equalsButton = GetTemplateChild(\"EqualsButton\") as Button;\r\n            if (equalsButton != null)\r\n            {\r\n                equalsButton.Click += (sender, args) => { Calculate(); };\r\n            }\r\n        }\r\n\r\n        private void SetOperation(string operation)\r\n        {\r\n            _operation = operation;\r\n            _operand = double.Parse(Value);\r\n            Value = \"0\";\r\n        }\r\n\r\n        public void Calculate()\r\n        {\r\n            double result = 0;\r\n            switch (_operation)\r\n            {\r\n                case \"+\":\r\n                    result = _operand + double.Parse(Value);\r\n                    break;\r\n                case \"-\":\r\n                    result = _operand - double.Parse(Value);\r\n                    break;\r\n                case \"*\":\r\n                    result = _operand * double.Parse(Value);\r\n                    break;\r\n                case \"/\":\r\n                    result = _operand / double.Parse(Value);\r\n                    break;\r\n            }\r\n\r\n            Value = result.ToString();\r\n            RaiseEvent(new RoutedEventArgs(CalculationCompletedEvent));\r\n        }\r\n\r\n        public ICommand ClearCommand { get; }\r\n\r\n        public ICommand AddCommand { get; }\r\n        public ICommand SubtractCommand { get; }\r\n        public ICommand MultiplyCommand { get; }\r\n        public ICommand DivideCommand { get; }\r\n        public ICommand EqualsCommand { get; }\r\n        public ICommand DigitCommand { get; }\r\n\r\n        public Calculator()\r\n        {\r\n            AddCommand = new RelayCommand(param => SetOperation(\"+\"));\r\n            SubtractCommand = new RelayCommand(param => SetOperation(\"-\"));\r\n            MultiplyCommand = new RelayCommand(param => SetOperation(\"*\"));\r\n            DivideCommand = new RelayCommand(param => SetOperation(\"/\"));\r\n            EqualsCommand = new RelayCommand(param => Calculate());\r\n            DigitCommand = new RelayCommand(param => Value += param.ToString());\r\n            ClearCommand = new RelayCommand(param => Value = \"0\");\r\n        }\r\n    }\r\n}\r\n"}
