{"prompt":"Here is the contents of ColorPaletteControl.cs, Can you please summarize the contents?","completion":"This is a .cs code file","code":"using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Reflection;\r\nusing System.Windows;\r\nusing System.Windows.Controls;\r\nusing System.Windows.Input;\r\nusing System.Windows.Media;\r\n\r\nnamespace Jon.Wpf.CustomControls\r\n{\r\n    public class ColorPaletteControl : Control\r\n    {\r\n        public int Rows\r\n        {\r\n            get { return (int)GetValue(RowsProperty); }\r\n            set { SetValue(RowsProperty, value); }\r\n        }\r\n        public int Columns\r\n        {\r\n            get { return (int)GetValue(ColumnsProperty); }\r\n            set { SetValue(ColumnsProperty, value); }\r\n        }\r\n        public List<Color> ColorList\r\n        {\r\n            get { return (List<Color>)GetValue(ColorListProperty); }\r\n            set { SetValue(ColorListProperty, value); }\r\n        }\r\n        public Color SelectedColor\r\n        {\r\n            get { return (Color)GetValue(SelectedColorProperty); }\r\n            set { SetValue(SelectedColorProperty, value); }\r\n        }\r\n\r\n        public Double ColorSquareWidth\r\n        {\r\n            get { return (Double)GetValue(ColorSquareWidthProperty); }\r\n            set { SetValue(ColorSquareWidthProperty, value); }\r\n        }\r\n\r\n        public Double ColorSquareHeight\r\n        {\r\n            get { return (Double)GetValue(ColorSquareHeightProperty); }\r\n            set { SetValue(ColorSquareHeightProperty, value); }\r\n        }\r\n\r\n        public int ColorSquareColumnCount\r\n        {\r\n            get { return (int)GetValue(ColorSquareColumnCountProperty); }\r\n            set { SetValue(ColorSquareColumnCountProperty, value); }\r\n        }\r\n\r\n        public ICommand SelectColorCommand { get; }\r\n        public ColorPaletteControl()\r\n        {\r\n            DefaultStyleKeyProperty.OverrideMetadata(typeof(ColorPaletteControl), new FrameworkPropertyMetadata(typeof(ColorPaletteControl)));\r\n            ColorList = GetAllColors();\r\n            SelectColorCommand = new RelayCommand(param =>\r\n            {\r\n                if (param is Color color)\r\n                {\r\n                    SelectColor(color);\r\n                }\r\n            });\r\n        }\r\n\r\n        public static readonly DependencyProperty ColorSquareWidthProperty =\r\n            DependencyProperty.Register(\"ColorSquareWidth\", typeof(double), typeof(ColorPaletteControl), new PropertyMetadata(16.0));\r\n\r\n        public static readonly DependencyProperty ColorSquareHeightProperty =\r\n           DependencyProperty.Register(\"ColorSquareHeight\", typeof(double), typeof(ColorPaletteControl), new PropertyMetadata(16.0));\r\n\r\n        public static readonly DependencyProperty ColorSquareColumnCountProperty =\r\n           DependencyProperty.Register(\"ColorSquareColumnCount\", typeof(int), typeof(ColorPaletteControl), new PropertyMetadata(15));\r\n\r\n        public static readonly DependencyProperty RowsProperty =\r\n                                                            DependencyProperty.Register(\"Rows\", typeof(int), typeof(ColorPaletteControl), new PropertyMetadata(5));\r\n\r\n        public static readonly DependencyProperty ColumnsProperty =\r\n            DependencyProperty.Register(\"Columns\", typeof(int), typeof(ColorPaletteControl), new PropertyMetadata(5));\r\n\r\n        public static readonly DependencyProperty ColorListProperty =\r\n            DependencyProperty.Register(\"ColorList\", typeof(List<Color>), typeof(ColorPaletteControl), new PropertyMetadata(GetAllColors()));\r\n\r\n        public static readonly DependencyProperty SelectedColorProperty =\r\n            DependencyProperty.Register(\"SelectedColor\", typeof(Color), typeof(ColorPaletteControl), new PropertyMetadata(Colors.Transparent));\r\n\r\n        public static readonly RoutedEvent ColorSelectedEvent =\r\n            EventManager.RegisterRoutedEvent(\"ColorSelected\", RoutingStrategy.Bubble, typeof(RoutedEventHandler), typeof(ColorPaletteControl));\r\n        public event RoutedEventHandler ColorSelected\r\n        {\r\n            add { AddHandler(ColorSelectedEvent, value); }\r\n            remove { RemoveHandler(ColorSelectedEvent, value); }\r\n        }\r\n\r\n        private static List<Color> GetAllColors()\r\n        {\r\n            return typeof(Colors)\r\n                .GetProperties(BindingFlags.Public | BindingFlags.Static)\r\n                .Where(prop => prop.PropertyType == typeof(Color))\r\n                .Select(prop => (Color)prop.GetValue(null))\r\n                .OrderBy(color => ColorToHue(color))\r\n                .ToList();\r\n        }\r\n        private static double ColorToHue(Color color)\r\n        {\r\n            // Convert RGB to HSV and return the hue\r\n            double hue = RGBtoHSV(color.ScR, color.ScG, color.ScB).Hue;\r\n\r\n            return hue;\r\n        }\r\n        private static (double Hue, double Saturation, double Value) RGBtoHSV(float r, float g, float b)\r\n        {\r\n            double max = Math.Max(r, Math.Max(g, b)), min = Math.Min(r, Math.Min(g, b));\r\n            double hue = max == min ? 0 : (max == r ? (g - b) / (max - min) + (g < b ? 6 : 0) : max == g ? (b - r) / (max - min) + 2 : (r - g) / (max - min) + 4);\r\n            double saturation = max == 0 ? 0 : (max - min) / max;\r\n            double value = max;\r\n\r\n            return (hue * 60, saturation, value); // Hue is in degrees between 0 and 360. Saturation and Value are from 0 to 1\r\n        }\r\n        private void SelectColor(Color color)\r\n        {\r\n            SelectedColor = color;\r\n            RaiseEvent(new RoutedEventArgs(ColorSelectedEvent, this));\r\n        }\r\n        public override void OnApplyTemplate()\r\n        {\r\n            base.OnApplyTemplate();\r\n            ColorList = GetAllColors();\r\n\r\n            // Calculate the number of rows and columns\r\n            int numberOfColors = ColorList.Count;\r\n            int desiredWidth = ColorSquareColumnCount; // Set this to the desired number of columns\r\n\r\n            Columns = desiredWidth;\r\n            Rows = (int)Math.Ceiling((double)numberOfColors / desiredWidth);\r\n\r\n        }\r\n    }\r\n}"}
